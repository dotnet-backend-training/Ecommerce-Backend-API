// <auto-generated />
using System;
using Ecommerce_Backend_Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce_Backend_Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711125657_Tables data seeding")]
    partial class Tablesdataseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernmentId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GovernmentId = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            GovernmentId = 1,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 3,
                            GovernmentId = 2,
                            Name = "Ramallah"
                        },
                        new
                        {
                            Id = 4,
                            GovernmentId = 3,
                            Name = "Amman"
                        },
                        new
                        {
                            Id = 5,
                            GovernmentId = 4,
                            Name = "Beirut"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics & Gadgets"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Health & Wellness"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Automotive Parts"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sports Equipment"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beauty & Personal Care"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.CustomerStore", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("CustomerStores");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            StoreId = 1
                        },
                        new
                        {
                            CustomerId = 2,
                            StoreId = 1
                        },
                        new
                        {
                            CustomerId = 3,
                            StoreId = 2
                        },
                        new
                        {
                            CustomerId = 4,
                            StoreId = 3
                        },
                        new
                        {
                            CustomerId = 5,
                            StoreId = 3
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Palestine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Syria"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.InventoryItemStore", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<double>("ReservedQuantity")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryItems");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            ItemId = 1,
                            Balance = 100.0,
                            Factor = 1,
                            LastUpdated = new DateTime(2025, 7, 11, 12, 56, 56, 361, DateTimeKind.Utc).AddTicks(6446),
                            ReservedQuantity = 10.0,
                            UserId = 1
                        },
                        new
                        {
                            StoreId = 1,
                            ItemId = 2,
                            Balance = 50.0,
                            Factor = 2,
                            LastUpdated = new DateTime(2025, 7, 11, 12, 56, 56, 361, DateTimeKind.Utc).AddTicks(6449),
                            ReservedQuantity = 5.0,
                            UserId = 2
                        },
                        new
                        {
                            StoreId = 2,
                            ItemId = 3,
                            Balance = 75.0,
                            Factor = 1,
                            LastUpdated = new DateTime(2025, 7, 11, 12, 56, 56, 361, DateTimeKind.Utc).AddTicks(6450),
                            ReservedQuantity = 0.0,
                            UserId = 3
                        },
                        new
                        {
                            StoreId = 3,
                            ItemId = 4,
                            Balance = 120.0,
                            Factor = 3,
                            LastUpdated = new DateTime(2025, 7, 11, 12, 56, 56, 361, DateTimeKind.Utc).AddTicks(6452),
                            ReservedQuantity = 15.0,
                            UserId = 4
                        },
                        new
                        {
                            StoreId = 3,
                            ItemId = 5,
                            Balance = 200.0,
                            Factor = 1,
                            LastUpdated = new DateTime(2025, 7, 11, 12, 56, 56, 361, DateTimeKind.Utc).AddTicks(6453),
                            ReservedQuantity = 20.0,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<double>("NetPrice")
                        .HasColumnType("float");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1443),
                            CustomerId = 1,
                            IsClosed = false,
                            IsPosted = true,
                            IsReviewed = true,
                            NetPrice = 150.75,
                            PaymentType = 1,
                            TransactionType = 1,
                            UpdatedAt = new DateTime(2025, 7, 6, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1451)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 3, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1454),
                            CustomerId = 2,
                            IsClosed = false,
                            IsPosted = false,
                            IsReviewed = false,
                            NetPrice = 299.99000000000001,
                            PaymentType = 2,
                            TransactionType = 2,
                            UpdatedAt = new DateTime(2025, 7, 7, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1454)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 4, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1457),
                            CustomerId = 3,
                            IsClosed = false,
                            IsPosted = true,
                            IsReviewed = false,
                            NetPrice = 75.5,
                            PaymentType = 1,
                            TransactionType = 1,
                            UpdatedAt = new DateTime(2025, 7, 8, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1458)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 5, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1460),
                            CustomerId = 4,
                            IsClosed = true,
                            IsPosted = true,
                            IsReviewed = true,
                            NetPrice = 450.0,
                            PaymentType = 3,
                            TransactionType = 2,
                            UpdatedAt = new DateTime(2025, 7, 9, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1460)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 6, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1462),
                            CustomerId = 5,
                            IsClosed = false,
                            IsPosted = true,
                            IsReviewed = true,
                            NetPrice = 1200.0,
                            PaymentType = 1,
                            TransactionType = 1,
                            UpdatedAt = new DateTime(2025, 7, 10, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(1463)
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("InvoicesDetails");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            ItemId = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(7740),
                            Factor = 1.0,
                            Price = 30,
                            Quantity = 2,
                            UnitId = 1
                        },
                        new
                        {
                            InvoiceId = 1,
                            ItemId = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(7746),
                            Factor = 1.0,
                            Price = 20,
                            Quantity = 1,
                            UnitId = 2
                        },
                        new
                        {
                            InvoiceId = 2,
                            ItemId = 3,
                            CreatedAt = new DateTime(2025, 7, 3, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(7749),
                            Factor = 1.0,
                            Price = 15,
                            Quantity = 3,
                            UnitId = 1
                        },
                        new
                        {
                            InvoiceId = 3,
                            ItemId = 4,
                            CreatedAt = new DateTime(2025, 7, 4, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(7752),
                            Factor = 1.0,
                            Price = 50,
                            Quantity = 1,
                            UnitId = 3
                        },
                        new
                        {
                            InvoiceId = 5,
                            ItemId = 5,
                            CreatedAt = new DateTime(2025, 7, 6, 12, 56, 56, 362, DateTimeKind.Utc).AddTicks(7762),
                            Factor = 1.0,
                            Price = 100,
                            Quantity = 5,
                            UnitId = 1
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SubGroup2Id")
                        .HasColumnType("int");

                    b.Property<int>("SubGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainGroupId");

                    b.HasIndex("SubGroup2Id");

                    b.HasIndex("SubGroupId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Latest Apple smartphone",
                            MainGroupId = 1,
                            Name = "iPhone 14",
                            Price = 999.99000000000001,
                            SubGroup2Id = 1,
                            SubGroupId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "High performance laptop",
                            MainGroupId = 1,
                            Name = "Dell XPS 15",
                            Price = 1500.0,
                            SubGroup2Id = 2,
                            SubGroupId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Comfortable cotton shirt",
                            MainGroupId = 2,
                            Name = "Men's Casual Shirt",
                            Price = 35.5,
                            SubGroup2Id = 3,
                            SubGroupId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Light and breezy",
                            MainGroupId = 2,
                            Name = "Women's Summer Dress",
                            Price = 45.990000000000002,
                            SubGroup2Id = 4,
                            SubGroupId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Flagship Samsung phone",
                            MainGroupId = 1,
                            Name = "Samsung Galaxy S22",
                            Price = 850.0,
                            SubGroup2Id = 1,
                            SubGroupId = 1
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.ItemUnit", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("ItemUnits");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            UnitId = 1,
                            Factor = 1
                        },
                        new
                        {
                            ItemId = 2,
                            UnitId = 1,
                            Factor = 1
                        },
                        new
                        {
                            ItemId = 3,
                            UnitId = 1,
                            Factor = 1
                        },
                        new
                        {
                            ItemId = 4,
                            UnitId = 1,
                            Factor = 1
                        },
                        new
                        {
                            ItemId = 5,
                            UnitId = 1,
                            Factor = 1
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.MainGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beauty & Personal Care"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.ShoppingCartItems", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StoreId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            CustomerId = 1,
                            CreatedAt = new DateTime(2025, 7, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemId = 1,
                            Quantity = 2.0,
                            UnitId = 1
                        },
                        new
                        {
                            StoreId = 2,
                            CustomerId = 1,
                            CreatedAt = new DateTime(2025, 7, 10, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            ItemId = 2,
                            Quantity = 5.0,
                            UnitId = 1,
                            UpdatedAt = new DateTime(2025, 7, 10, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StoreId = 2,
                            CustomerId = 2,
                            CreatedAt = new DateTime(2025, 7, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            ItemId = 3,
                            Quantity = 1.5,
                            UnitId = 2
                        },
                        new
                        {
                            StoreId = 3,
                            CustomerId = 3,
                            CreatedAt = new DateTime(2025, 7, 8, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            ItemId = 4,
                            Quantity = 10.0,
                            UnitId = 3,
                            UpdatedAt = new DateTime(2025, 7, 9, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StoreId = 4,
                            CustomerId = 4,
                            CreatedAt = new DateTime(2025, 7, 7, 11, 15, 0, 0, DateTimeKind.Unspecified),
                            ItemId = 5,
                            Quantity = 3.0,
                            UnitId = 4
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GovernmentId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            GovernmentId = 1,
                            Name = "Downtown Electronics",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            GovernmentId = 1,
                            Name = "City Fashion Outlet",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            GovernmentId = 2,
                            Name = "Home Goods Central",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            GovernmentId = 2,
                            Name = "Sports Hub",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            GovernmentId = 3,
                            Name = "Beauty Essentials",
                            ZoneId = 5
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainGroupId");

                    b.ToTable("SubGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainGroupId = 1,
                            Name = "Mobile Phones"
                        },
                        new
                        {
                            Id = 2,
                            MainGroupId = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 3,
                            MainGroupId = 2,
                            Name = "Men's Wear"
                        },
                        new
                        {
                            Id = 4,
                            MainGroupId = 2,
                            Name = "Women's Wear"
                        },
                        new
                        {
                            Id = 5,
                            MainGroupId = 3,
                            Name = "Kitchen Appliances"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainGroupId");

                    b.HasIndex("SubGroupId");

                    b.ToTable("SubGroup2s");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainGroupId = 1,
                            Name = "Smartphones",
                            SubGroupId = 1
                        },
                        new
                        {
                            Id = 2,
                            MainGroupId = 2,
                            Name = "Gaming Laptops",
                            SubGroupId = 2
                        },
                        new
                        {
                            Id = 3,
                            MainGroupId = 3,
                            Name = "Shirts",
                            SubGroupId = 3
                        },
                        new
                        {
                            Id = 4,
                            MainGroupId = 3,
                            Name = "Dresses",
                            SubGroupId = 4
                        },
                        new
                        {
                            Id = 5,
                            MainGroupId = 1,
                            Name = "Blenders",
                            SubGroupId = 5
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Piece"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Liter"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Box"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pack"
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("GovernmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ZoneId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CityId = 1,
                            ClassificationId = 1,
                            ConcurrencyStamp = "9f35d73c-d3bf-4af2-857f-b411d8b4d156",
                            Email = "userone@example.com",
                            EmailConfirmed = true,
                            GovernmentId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERONE@EXAMPLE.COM",
                            NormalizedUserName = "USERONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3k1YgV+0bmv3lrxpL7SYo9zMwKaJBK9pwRFZeDzpaTzSUdpKXaHfrO/ypNU5NHZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f204314d-25a4-454d-a941-7355ccbd5591",
                            TwoFactorEnabled = false,
                            UserName = "userone",
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CityId = 2,
                            ClassificationId = 1,
                            ConcurrencyStamp = "6a2a41d3-8169-4d0c-bc35-61180e02e206",
                            Email = "usertwo@example.com",
                            EmailConfirmed = true,
                            GovernmentId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERTWO@EXAMPLE.COM",
                            NormalizedUserName = "USERTWO",
                            PasswordHash = "AQAAAAIAAYagAAAAEPRHV6QgXffVubeJ1CNbLXgSg+UtXaQ8a4meLgdBUtS/8ovxnKfMzUa6asI1NtW+fA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b0d3e2f-122e-4436-aaf9-8d9e17568212",
                            TwoFactorEnabled = false,
                            UserName = "usertwo",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            CityId = 3,
                            ClassificationId = 2,
                            ConcurrencyStamp = "269b0d2b-7463-4eeb-9698-93fc8f12fb39",
                            Email = "userthree@example.com",
                            EmailConfirmed = true,
                            GovernmentId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERTHREE@EXAMPLE.COM",
                            NormalizedUserName = "USERTHREE",
                            PasswordHash = "AQAAAAIAAYagAAAAECPNZxv9FEmNezmOxQIRGOqUNmgy1TzE/8x+NcF8YUZHZ/j6d6tOqHUxNoX+0lKNDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11b92e1d-4700-4e4a-9966-683532c9fb2f",
                            TwoFactorEnabled = false,
                            UserName = "userthree",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            CityId = 4,
                            ClassificationId = 2,
                            ConcurrencyStamp = "0fc6f670-b130-40d6-9280-e6033fda8c06",
                            Email = "userfour@example.com",
                            EmailConfirmed = true,
                            GovernmentId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERFOUR@EXAMPLE.COM",
                            NormalizedUserName = "USERFOUR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWUXx+8FIFZ/B9B8dU+QJ01ArySuBwxi0kuhEQZxFf6qKeR8IIPBGJrG4pHNz8N4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1316c07-9211-4963-90fe-eae53c8cd88b",
                            TwoFactorEnabled = false,
                            UserName = "userfour",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            CityId = 5,
                            ClassificationId = 3,
                            ConcurrencyStamp = "a2a3cfde-601d-4b8f-b929-c7f082b4e6b6",
                            Email = "userfive@example.com",
                            EmailConfirmed = true,
                            GovernmentId = 3,
                            LockoutEnabled = false,
                            NormalizedEmail = "USERFIVE@EXAMPLE.COM",
                            NormalizedUserName = "USERFIVE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHATr+uiBct4kSuCII3v6m83wi+ufV/LR3fJ/EkSBVuE7DNjK9x1zXq3rOOtE3I79g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01f2bfda-e57a-4444-9d40-70ef255a0923",
                            TwoFactorEnabled = false,
                            UserName = "userfive",
                            ZoneId = 5
                        });
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GovernmentId");

                    b.ToTable("Zone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            GovernmentId = 1,
                            Name = "Cairo Zone"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            GovernmentId = 1,
                            Name = "Alex Zone"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            GovernmentId = 2,
                            Name = "Ramallah Zone"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            GovernmentId = 3,
                            Name = "Amman Zone"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            GovernmentId = 4,
                            Name = "Beirut Zone"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.City", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.Government", "Government")
                        .WithMany("Cities")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Government");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.CustomerStore", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", "Customer")
                        .WithMany("CustomerStores")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Store", "Store")
                        .WithMany("CustomerStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.InventoryItemStore", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.Item", "Item")
                        .WithMany("InventoryItemStores")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Store", "Store")
                        .WithMany("InventoryItemStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.User", "User")
                        .WithMany("InventoryItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Invoice", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.InvoiceDetails", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Item", "Item")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Unit", "Unit")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Item", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.MainGroup", "MainGroup")
                        .WithMany("Items")
                        .HasForeignKey("MainGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.SubGroup2", "SubGroup2")
                        .WithMany("Items")
                        .HasForeignKey("SubGroup2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.SubGroup", "SubGroup")
                        .WithMany("Items")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainGroup");

                    b.Navigation("SubGroup");

                    b.Navigation("SubGroup2");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.ItemUnit", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.Item", "Item")
                        .WithMany("ItemUnits")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Unit", "Unit")
                        .WithMany("ItemUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.ShoppingCartItems", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", "Customer")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Item", "Item")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Store", "Store")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Unit", "Unit")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Item");

                    b.Navigation("Store");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Store", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.City", "City")
                        .WithMany("Stores")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Government", "Government")
                        .WithMany("Stores")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Zone", "Zone")
                        .WithMany("Stores")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Government");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.MainGroup", "MainGroup")
                        .WithMany("SubGroups")
                        .HasForeignKey("MainGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainGroup");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup2", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.MainGroup", "MainGroup")
                        .WithMany("SubGroups2")
                        .HasForeignKey("MainGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.SubGroup", "SubGroup")
                        .WithMany("SubGroups2")
                        .HasForeignKey("SubGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainGroup");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.User", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Classification", "Classification")
                        .WithMany("Users")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Government", "Government")
                        .WithMany("Users")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Zone", "Zone")
                        .WithMany("Users")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Classification");

                    b.Navigation("Government");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Zone", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.City", "City")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.Government", "Government")
                        .WithMany("Zones")
                        .HasForeignKey("GovernmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Government");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce_Backend_Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Ecommerce_Backend_Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.City", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Classification", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Government", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Stores");

                    b.Navigation("Users");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Item", b =>
                {
                    b.Navigation("InventoryItemStores");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("ItemUnits");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.MainGroup", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubGroups");

                    b.Navigation("SubGroups2");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Store", b =>
                {
                    b.Navigation("CustomerStores");

                    b.Navigation("InventoryItemStores");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubGroups2");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.SubGroup2", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Unit", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("ItemUnits");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.User", b =>
                {
                    b.Navigation("CustomerStores");

                    b.Navigation("InventoryItems");

                    b.Navigation("Invoices");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Ecommerce_Backend_Core.Models.Zone", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
